import fs from 'fs'
import { google } from 'googleapis'
import path from 'path'

const SCOPES = ['https://www.googleapis.com/auth/calendar.events']
const CREDENTIALS_PATH = './credentials.json'
const TOKENS_DIR = 'src/data/tokens'

export let googleAuthClient = null

if (!fs.existsSync(TOKENS_DIR)) {
  fs.mkdirSync(TOKENS_DIR, { recursive: true })
}

// –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const authorizeUser = async (userId) => {
  const credentials = JSON.parse(fs.readFileSync(CREDENTIALS_PATH, 'utf8'))
  const { client_secret, client_id, redirect_uris } = credentials.installed
  const oAuth2Client = new google.auth.OAuth2(client_id, client_secret, redirect_uris[0])

  const tokenPath = `${TOKENS_DIR}/${userId}.json`
  if (fs.existsSync(tokenPath)) {
    const token = JSON.parse(fs.readFileSync(tokenPath))
    oAuth2Client.setCredentials(token)
    return oAuth2Client
  } else {
    return null
  }
}

// üîπ –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
export const findAvailableSlot = async (userId, date) => {
  const auth = await authorizeUser(userId)
  if (!auth) {
    throw new Error('‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /auth')
  }

  const calendar = google.calendar({ version: 'v3', auth })

  const startOfDay = new Date(`${date}T07:00:00+03:00`) // 07:00
  const endOfDay = new Date(`${date}T23:59:00+03:00`) // 23:59

  const events = await calendar.events.list({
    calendarId: 'primary',
    timeMin: startOfDay.toISOString(),
    timeMax: endOfDay.toISOString(),
    singleEvents: true,
    orderBy: 'startTime',
  })

  const busySlots = events.data.items.map((event) => ({
    start: new Date(event.start.dateTime || event.start.date),
    end: new Date(event.end.dateTime || event.end.date),
  }))

  // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è (30 –º–∏–Ω—É—Ç)
  const eventDuration = 30 * 60 * 1000

  let availableStart = startOfDay

  for (let slot of busySlots) {
    if (availableStart.getTime() + eventDuration <= slot.start.getTime()) {
      // –ù–∞—à–ª–∏ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è
      return {
        startDateTime: availableStart.toISOString(),
        endDateTime: new Date(availableStart.getTime() + eventDuration).toISOString(),
      }
    }
    availableStart = new Date(slot.end.getTime()) // –°–¥–≤–∏–≥–∞–µ–º –Ω–∞ –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
  }

  // –ï—Å–ª–∏ –≤–µ—Å—å –¥–µ–Ω—å –∑–∞–Ω—è—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
  if (availableStart.getTime() + eventDuration > endOfDay.getTime()) {
    throw new Error('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å.')
  }

  // –ï—Å–ª–∏ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π –µ—Å—Ç—å –º–µ—Å—Ç–æ ‚Äî –±–µ—Ä–µ–º –µ–≥–æ
  return {
    startDateTime: availableStart.toISOString(),
    endDateTime: new Date(availableStart.getTime() + eventDuration).toISOString(),
  }
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
export const getAuthUrl = () => {
  const credentials = JSON.parse(fs.readFileSync(CREDENTIALS_PATH))
  const { client_secret, client_id, redirect_uris } = credentials.installed
  const oAuth2Client = new google.auth.OAuth2(client_id, client_secret, redirect_uris[0])

  return oAuth2Client.generateAuthUrl({
    access_type: 'offline',
    prompt: 'consent',
    scope: SCOPES,
  })
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const saveUserToken = async (userId, code) => {
  try {
    const credentials = JSON.parse(fs.readFileSync(CREDENTIALS_PATH))
    const { client_secret, client_id, redirect_uris } = credentials.installed
    const oAuth2Client = new google.auth.OAuth2(client_id, client_secret, redirect_uris[0])

    const { tokens } = await oAuth2Client.getToken(code)
    oAuth2Client.setCredentials(tokens)

    const tokenPath = `${TOKENS_DIR}/${userId}.json`
    fs.writeFileSync(tokenPath, JSON.stringify(tokens))

    return '‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å.'
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error)

    if (error.message.includes('invalid_grant')) {
      throw new Error('‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.')
    } else {
      throw new Error('‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.')
    }
  }
}

// **–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É**
export const getEventsForDate = async (userId, date) => {
  const auth = await authorizeUser(userId)
  if (!auth) return []

  const calendar = google.calendar({ version: 'v3', auth })
  const startOfDay = new Date(date)
  startOfDay.setHours(0, 0, 0, 0)
  const endOfDay = new Date(date)
  endOfDay.setHours(23, 59, 59, 999)

  try {
    const res = await calendar.events.list({
      calendarId: 'primary',
      timeMin: startOfDay.toISOString(),
      timeMax: endOfDay.toISOString(),
      singleEvents: true,
      orderBy: 'startTime',
    })

    return res.data.items.map((event) => ({
      summary: event.summary,
      start: event.start.dateTime || event.start.date,
      end: event.end.dateTime || event.end.date,
    }))
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π:', error)
    return []
  }
}

export const getAuthClient = async (userId) => {
  const tokenPath = path.join(TOKENS_DIR, `${userId}.json`)

  if (!fs.existsSync(tokenPath)) {
    throw new Error('‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.')
  }

  const token = JSON.parse(fs.readFileSync(tokenPath, 'utf8'))
  const credentials = JSON.parse(fs.readFileSync('./credentials.json', 'utf8'))

  const { client_secret, client_id, redirect_uris } = credentials.installed
  const authClient = new google.auth.OAuth2(client_id, client_secret, redirect_uris[0])

  authClient.setCredentials(token)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ –∏ –µ—Å—Ç—å refresh_token ‚Üí –æ–±–Ω–æ–≤–ª—è–µ–º access_token
  if (token.expiry_date && token.expiry_date < Date.now()) {
    try {
      const { credentials: newToken } = await authClient.refreshAccessToken()
      authClient.setCredentials(newToken)

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
      fs.writeFileSync(tokenPath, JSON.stringify(newToken))
      console.log(`üîÑ –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error)
      throw new Error('‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é /auth')
    }
  }

  return authClient
}

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
export const addEventToCalendar = async (userId, event) => {
  try {
    const auth = await getAuthClient(userId)
    const calendar = google.calendar({ version: 'v3', auth })

    const eventStartTime = new Date(event.startDateTime)
    const eventEndTime = new Date(event.endDateTime)

    const minTime = new Date(eventStartTime)
    minTime.setHours(7, 0, 0, 0) // 07:00 - –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–æ–±—ã—Ç–∏–π

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ä–∞–Ω—å—à–µ –ª–∏ —Å–æ–±—ã—Ç–∏–µ 07:00
    if (eventStartTime < minTime) {
      return `‚ùå –û—à–∏–±–∫–∞: –Ω–µ–ª—å–∑—è –¥–æ–±–∞–≤–ª—è—Ç—å —Å–æ–±—ã—Ç–∏—è —Ä–∞–Ω—å—à–µ 07:00. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.`
    }

    const response = await calendar.events.insert({
      calendarId: 'primary',
      resource: {
        summary: event.summary,
        start: { dateTime: event.startDateTime, timeZone: 'Europe/Moscow' },
        end: { dateTime: event.endDateTime, timeZone: 'Europe/Moscow' },
      },
    })

    return `‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ: ${response.data.htmlLink}`
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è:', error)
    return `‚ùå –û—à–∏–±–∫–∞: ${error.message}`
  }
}
