import * as chrono from 'chrono-node'
import { addEventToCalendar, findAvailableSlot, getEventsForDate } from '../services/googleCalendarService.js'


export const addEventHandler = async (ctx) => {
  const userId = ctx.from.id
  let text = ctx.message.text.replace('/addevent', '').trim()

  if (!text) {
    return ctx.reply(
      '‚ùå –û—à–∏–±–∫–∞: –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏ –¥–∞—Ç—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/addevent –ü–æ–º—ã—Ç—å –º–∞—à–∏–Ω—É –≤ —á–µ—Ç–≤–µ—Ä–≥`'
    )
  }

  const replacements = {
    –∑–∞–≤—Ç—Ä–∞: 'tomorrow',
    –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞: 'in 2 days',
    –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫: 'next Monday',
    –≤—Ç–æ—Ä–Ω–∏–∫: 'next Tuesday',
    —Å—Ä–µ–¥—É: 'next Wednesday',
    —á–µ—Ç–≤–µ—Ä–≥: 'next Thursday',
    –ø—è—Ç–Ω–∏—Ü—É: 'next Friday',
    —Å—É–±–±–æ—Ç—É: 'next Saturday',
    –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ: 'next Sunday',
  }

  for (const [key, value] of Object.entries(replacements)) {
    text = text.replace(new RegExp(`\\b${key}\\b`, 'gi'), value)
  }

  console.log('üìå –í—Ö–æ–¥—è—â–∏–π —Ç–µ–∫—Å—Ç:', text)
  let parsedDate = chrono.ru.parseDate(text)

  if (!parsedDate) {
    console.error('‚ùå –û—à–∏–±–∫–∞: Chrono-node –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É –∏–∑ —Ç–µ–∫—Å—Ç–∞:', text)
    return ctx.reply('‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –¥–∞—Ç—É –ø–æ-–¥—Ä—É–≥–æ–º—É!')
  }

  const now = new Date()
  if (parsedDate < now) {
    parsedDate.setDate(parsedDate.getDate() + 7)
  }

  console.log('üìå –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –¥–∞—Ç–∞:', parsedDate)
  const summary = text
    .replace(/(–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞|–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫|–≤—Ç–æ—Ä–Ω–∏–∫|—Å—Ä–µ–¥—É|—á–µ—Ç–≤–µ—Ä–≥|–ø—è—Ç–Ω–∏—Ü—É|—Å—É–±–±–æ—Ç—É|–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)/gi, '')
    .trim()

  const date = parsedDate.toISOString().split('T')[0]

  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
  const events = await getEventsForDate(userId, date)
  let startDateTime = parsedDate.toISOString()
  let endDateTime = new Date(parsedDate.getTime() + 60 * 60 * 1000).toISOString()

  let conflict = events.find(
    (event) =>
      (startDateTime >= event.start && startDateTime < event.end) ||
      (endDateTime > event.start && endDateTime <= event.end)
  )

  if (conflict) {
    // –ò—â–µ–º –±–ª–∏–∂–∞–π—à–µ–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è
    const availableSlot = await findAvailableSlot(userId, date)
    startDateTime = availableSlot.startDateTime
    endDateTime = availableSlot.endDateTime

    ctx.reply(`‚ö†Ô∏è –í—Ä–µ–º—è **${parsedDate.toLocaleTimeString()}** —É–∂–µ –∑–∞–Ω—è—Ç–æ —Å–æ–±—ã—Ç–∏–µ–º: **"${
      conflict.summary
    }"**. 
  –Ø –ø–µ—Ä–µ–Ω–µ—Å –≤–∞—à—É –∑–∞–¥–∞—á—É –Ω–∞ **${new Date(startDateTime).toLocaleTimeString()}**.`)
  }

  const response = await addEventToCalendar(userId, { summary, startDateTime, endDateTime })
  ctx.reply(response)
}
