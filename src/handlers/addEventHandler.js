import * as chrono from 'chrono-node'
import { addEventToCalendar, findAvailableSlot, getEventsForDate } from '../services/googleCalendarService.js'

export const addEventHandler = async (ctx) => {
  const userId = ctx.from.id
  let text = ctx.message.text.replace('/addevent', '').trim()

  if (!text) {
    return ctx.reply(
      '‚ùå –û—à–∏–±–∫–∞: –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏ –¥–∞—Ç—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/addevent –ü–æ–º—ã—Ç—å –º–∞—à–∏–Ω—É –≤ —á–µ—Ç–≤–µ—Ä–≥`'
    )
  }

  const replacements = {
    –∑–∞–≤—Ç—Ä–∞: 'tomorrow',
    –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞: 'in 2 days',
    –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫: 'next Monday',
    –≤—Ç–æ—Ä–Ω–∏–∫: 'next Tuesday',
    —Å—Ä–µ–¥—É: 'next Wednesday',
    —á–µ—Ç–≤–µ—Ä–≥: 'next Thursday',
    –ø—è—Ç–Ω–∏—Ü—É: 'next Friday',
    —Å—É–±–±–æ—Ç—É: 'next Saturday',
    –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ: 'next Sunday',
  }

  for (const [key, value] of Object.entries(replacements)) {
    text = text.replace(new RegExp(`\\b${key}\\b`, 'gi'), value)
  }

  console.log('üìå –í—Ö–æ–¥—è—â–∏–π —Ç–µ–∫—Å—Ç:', text)
  let parsedDate = chrono.ru.parseDate(text)

  if (!parsedDate) {
    console.error('‚ùå Chrono-node –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É:', text)
    return ctx.reply('‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –¥–∞—Ç—É –ø–æ-–¥—Ä—É–≥–æ–º—É!')
  }

  const today = new Date().setHours(0, 0, 0, 0)
  const eventDay = new Date(parsedDate).setHours(0, 0, 0, 0)

  // –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º –∏ –Ω–µ —Å–µ–≥–æ–¥–Ω—è ‚Üí –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ –±—É–¥—É—â—É—é –¥–∞—Ç—É
  if (eventDay < today) {
    parsedDate.setDate(parsedDate.getDate() + 7)
  }

  // –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç —è–≤–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, —Å—Ç–∞–≤–∏–º 09:00
  if (!/(\d{1,2}[:.]\d{2})/.test(text)) {
    parsedDate.setHours(9, 0, 0, 0)
  }

  console.log('üìå –ò—Ç–æ–≥–æ–≤–∞—è –¥–∞—Ç–∞:', parsedDate)

  const summary = text
    .replace(/(–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞|–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫|–≤—Ç–æ—Ä–Ω–∏–∫|—Å—Ä–µ–¥—É|—á–µ—Ç–≤–µ—Ä–≥|–ø—è—Ç–Ω–∏—Ü—É|—Å—É–±–±–æ—Ç—É|–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)/gi, '')
    .trim()
  const date = parsedDate.toISOString().split('T')[0]

  // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–±—ã—Ç–∏—è
  const events = await getEventsForDate(userId, date)
  let startDateTime = parsedDate.toISOString()
  let endDateTime = new Date(parsedDate.getTime() + 60 * 60 * 1000).toISOString()

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
  let conflict = events.find((event) => {
    const eventStart = new Date(event.start)
    const eventEnd = new Date(event.end)
    return (
      (new Date(startDateTime) >= eventStart && new Date(startDateTime) < eventEnd) ||
      (new Date(endDateTime) > eventStart && new Date(endDateTime) <= eventEnd)
    )
  })

  if (conflict) {
    // –ï—Å–ª–∏ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–æ, –∏—â–µ–º –±–ª–∏–∂–∞–π—à–µ–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ
    const availableSlot = await findAvailableSlot(userId, date)
    startDateTime = availableSlot.startDateTime
    endDateTime = availableSlot.endDateTime

    ctx.reply(
      `‚ö†Ô∏è –í—Ä–µ–º—è **${parsedDate.toLocaleTimeString()}** –∑–∞–Ω—è—Ç–æ —Å–æ–±—ã—Ç–∏–µ–º **"${
        conflict.summary
      }"**.\n  –Ø –ø–µ—Ä–µ–Ω–µ—Å –≤–∞—à—É –∑–∞–¥–∞—á—É –Ω–∞ **${new Date(startDateTime).toLocaleTimeString()}**.`
    )
  }

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
  const response = await addEventToCalendar(userId, { summary, startDateTime, endDateTime })
  ctx.reply(response)
}
