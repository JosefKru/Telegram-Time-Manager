import cron from 'node-cron'
import { logError } from './logger.js'
import { bot } from './bot.js'

export const startScheduler = (chatId) => {
  cron.schedule(
    '0 9 * * *',
    async () => {
      if (!chatId) {
        await bot.telegram.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: chatId –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start')
        console.error('‚ùå –û—à–∏–±–∫–∞: chatId –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.')
        return
      }

      try {
        const fakeUpdate = {
          update_id: Date.now(),
          message: {
            message_id: Date.now(),
            from: { id: chatId, is_bot: false, first_name: 'Auto', username: 'AutoUser' },
            chat: { id: chatId, type: 'private' },
            date: Math.floor(Date.now() / 1000),
            text: '/tasks',
            entities: [{ offset: 0, length: 6, type: 'bot_command' }],
          },
        }

        await bot.handleUpdate(fakeUpdate)
      } catch (error) {
        logError('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è cron-–∑–∞–¥–∞—á–∏', error)
        await bot.telegram.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –∑–∞–ø—É—Å–∫–µ /tasks.')
      }
    },
    {
      scheduled: true,
      timezone: 'Europe/Moscow',
    }
  )
}

// export const startScheduler = (chatId) => {
//   cron.schedule(
//     ' 19 * * *',
//     async () => {
//       if (!chatId) {
//         console.error('‚ùå –û—à–∏–±–∫–∞: chatId –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.')
//         return
//       }

//       try {
//         console.log('üìÖ –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã /tasks –≤ 15:00')

//         const fakeUpdate = {
//           update_id: Date.now(),
//           message: {
//             message_id: Date.now(),
//             from: { id: chatId, is_bot: false, first_name: 'Auto', username: 'AutoUser' },
//             chat: { id: chatId, type: 'private' },
//             date: Math.floor(Date.now() / 1000),
//             text: '/tasks',
//             entities: [{ offset: 0, length: 6, type: 'bot_command' }],
//           },
//         }

//         await bot.handleUpdate(fakeUpdate)
//         console.log('‚úÖ –ö–æ–º–∞–Ω–¥–∞ /tasks –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏')
//       } catch (error) {
//         logError('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è cron-–∑–∞–¥–∞—á–∏', error)
//         await bot.telegram.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –∑–∞–ø—É—Å–∫–µ /tasks.')
//       }
//     },
//     {
//       scheduled: true,
//       timezone: 'Europe/Moscow',
//     }
//   )
// }
